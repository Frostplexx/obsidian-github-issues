/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/before-after-hook/lib/register.js
var require_register = __commonJS({
  "node_modules/before-after-hook/lib/register.js"(exports, module2) {
    module2.exports = register;
    function register(state, name, method, options) {
      if (typeof method !== "function") {
        throw new Error("method for before hook must be a function");
      }
      if (!options) {
        options = {};
      }
      if (Array.isArray(name)) {
        return name.reverse().reduce(function(callback, name2) {
          return register.bind(null, state, name2, callback, options);
        }, method)();
      }
      return Promise.resolve().then(function() {
        if (!state.registry[name]) {
          return method(options);
        }
        return state.registry[name].reduce(function(method2, registered) {
          return registered.hook.bind(null, method2, options);
        }, method)();
      });
    }
  }
});

// node_modules/before-after-hook/lib/add.js
var require_add = __commonJS({
  "node_modules/before-after-hook/lib/add.js"(exports, module2) {
    module2.exports = addHook;
    function addHook(state, kind, name, hook2) {
      var orig = hook2;
      if (!state.registry[name]) {
        state.registry[name] = [];
      }
      if (kind === "before") {
        hook2 = function(method, options) {
          return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
        };
      }
      if (kind === "after") {
        hook2 = function(method, options) {
          var result;
          return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
            result = result_;
            return orig(result, options);
          }).then(function() {
            return result;
          });
        };
      }
      if (kind === "error") {
        hook2 = function(method, options) {
          return Promise.resolve().then(method.bind(null, options)).catch(function(error) {
            return orig(error, options);
          });
        };
      }
      state.registry[name].push({
        hook: hook2,
        orig
      });
    }
  }
});

// node_modules/before-after-hook/lib/remove.js
var require_remove = __commonJS({
  "node_modules/before-after-hook/lib/remove.js"(exports, module2) {
    module2.exports = removeHook;
    function removeHook(state, name, method) {
      if (!state.registry[name]) {
        return;
      }
      var index = state.registry[name].map(function(registered) {
        return registered.orig;
      }).indexOf(method);
      if (index === -1) {
        return;
      }
      state.registry[name].splice(index, 1);
    }
  }
});

// node_modules/before-after-hook/index.js
var require_before_after_hook = __commonJS({
  "node_modules/before-after-hook/index.js"(exports, module2) {
    var register = require_register();
    var addHook = require_add();
    var removeHook = require_remove();
    var bind = Function.bind;
    var bindable = bind.bind(bind);
    function bindApi(hook2, state, name) {
      var removeHookRef = bindable(removeHook, null).apply(
        null,
        name ? [state, name] : [state]
      );
      hook2.api = { remove: removeHookRef };
      hook2.remove = removeHookRef;
      ["before", "error", "after", "wrap"].forEach(function(kind) {
        var args = name ? [state, kind, name] : [state, kind];
        hook2[kind] = hook2.api[kind] = bindable(addHook, null).apply(null, args);
      });
    }
    function HookSingular() {
      var singularHookName = "h";
      var singularHookState = {
        registry: {}
      };
      var singularHook = register.bind(null, singularHookState, singularHookName);
      bindApi(singularHook, singularHookState, singularHookName);
      return singularHook;
    }
    function HookCollection() {
      var state = {
        registry: {}
      };
      var hook2 = register.bind(null, state);
      bindApi(hook2, state);
      return hook2;
    }
    var collectionHookDeprecationMessageDisplayed = false;
    function Hook() {
      if (!collectionHookDeprecationMessageDisplayed) {
        console.warn(
          '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
        );
        collectionHookDeprecationMessageDisplayed = true;
      }
      return HookCollection();
    }
    Hook.Singular = HookSingular.bind();
    Hook.Collection = HookCollection.bind();
    module2.exports = Hook;
    module2.exports.Hook = Hook;
    module2.exports.Singular = Hook.Singular;
    module2.exports.Collection = Hook.Collection;
  }
});

// node_modules/node-fetch/browser.js
var require_browser = __commonJS({
  "node_modules/node-fetch/browser.js"(exports, module2) {
    "use strict";
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    };
    var globalObject = getGlobal();
    module2.exports = exports = globalObject.fetch;
    if (globalObject.fetch) {
      exports.default = globalObject.fetch.bind(globalObject);
    }
    exports.Headers = globalObject.Headers;
    exports.Request = globalObject.Request;
    exports.Response = globalObject.Response;
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once2);
    module2.exports.strict = wrappy(onceStrict);
    once2.proto = once2(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once2(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once2(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  IssueAppearance: () => IssueAppearance,
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// node_modules/universal-user-agent/dist-web/index.js
function getUserAgent() {
  if (typeof navigator === "object" && "userAgent" in navigator) {
    return navigator.userAgent;
  }
  if (typeof process === "object" && "version" in process) {
    return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
  }
  return "<environment undetectable>";
}

// node_modules/@octokit/core/dist-web/index.js
var import_before_after_hook = __toESM(require_before_after_hook());

// node_modules/is-plain-object/dist/is-plain-object.mjs
function isObject(o) {
  return Object.prototype.toString.call(o) === "[object Object]";
}
function isPlainObject(o) {
  var ctor, prot;
  if (isObject(o) === false)
    return false;
  ctor = o.constructor;
  if (ctor === void 0)
    return true;
  prot = ctor.prototype;
  if (isObject(prot) === false)
    return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}

// node_modules/@octokit/endpoint/dist-web/index.js
function lowercaseKeys(object) {
  if (!object) {
    return {};
  }
  return Object.keys(object).reduce((newObj, key) => {
    newObj[key.toLowerCase()] = object[key];
    return newObj;
  }, {});
}
function mergeDeep(defaults, options) {
  const result = Object.assign({}, defaults);
  Object.keys(options).forEach((key) => {
    if (isPlainObject(options[key])) {
      if (!(key in defaults))
        Object.assign(result, { [key]: options[key] });
      else
        result[key] = mergeDeep(defaults[key], options[key]);
    } else {
      Object.assign(result, { [key]: options[key] });
    }
  });
  return result;
}
function removeUndefinedProperties(obj) {
  for (const key in obj) {
    if (obj[key] === void 0) {
      delete obj[key];
    }
  }
  return obj;
}
function merge(defaults, route, options) {
  if (typeof route === "string") {
    let [method, url] = route.split(" ");
    options = Object.assign(url ? { method, url } : { url: method }, options);
  } else {
    options = Object.assign({}, route);
  }
  options.headers = lowercaseKeys(options.headers);
  removeUndefinedProperties(options);
  removeUndefinedProperties(options.headers);
  const mergedOptions = mergeDeep(defaults || {}, options);
  if (defaults && defaults.mediaType.previews.length) {
    mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
  }
  mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
  return mergedOptions;
}
function addQueryParameters(url, parameters) {
  const separator = /\?/.test(url) ? "&" : "?";
  const names = Object.keys(parameters);
  if (names.length === 0) {
    return url;
  }
  return url + separator + names.map((name) => {
    if (name === "q") {
      return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
    }
    return `${name}=${encodeURIComponent(parameters[name])}`;
  }).join("&");
}
var urlVariableRegex = /\{[^}]+\}/g;
function removeNonChars(variableName) {
  return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
  const matches = url.match(urlVariableRegex);
  if (!matches) {
    return [];
  }
  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}
function omit(object, keysToOmit) {
  return Object.keys(object).filter((option) => !keysToOmit.includes(option)).reduce((obj, key) => {
    obj[key] = object[key];
    return obj;
  }, {});
}
function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }
    return part;
  }).join("");
}
function encodeUnreserved(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeValue(operator, value, key) {
  value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
  if (key) {
    return encodeUnreserved(key) + "=" + value;
  } else {
    return value;
  }
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context, operator, key, modifier) {
  var value = context[key], result = [];
  if (isDefined(value) && value !== "") {
    if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
      value = value.toString();
      if (modifier && modifier !== "*") {
        value = value.substring(0, parseInt(modifier, 10));
      }
      result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
    } else {
      if (modifier === "*") {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : ""));
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              result.push(encodeValue(operator, value[k], k));
            }
          });
        }
      } else {
        const tmp = [];
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            tmp.push(encodeValue(operator, value2));
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              tmp.push(encodeUnreserved(k));
              tmp.push(encodeValue(operator, value[k].toString()));
            }
          });
        }
        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value === "") {
      result.push("");
    }
  }
  return result;
}
function parseUrl(template) {
  return {
    expand: expand.bind(null, template)
  };
}
function expand(template, context) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
    if (expression) {
      let operator = "";
      const values = [];
      if (operators.indexOf(expression.charAt(0)) !== -1) {
        operator = expression.charAt(0);
        expression = expression.substr(1);
      }
      expression.split(/,/g).forEach(function(variable) {
        var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
        values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
      });
      if (operator && operator !== "+") {
        var separator = ",";
        if (operator === "?") {
          separator = "&";
        } else if (operator !== "#") {
          separator = operator;
        }
        return (values.length !== 0 ? operator : "") + values.join(separator);
      } else {
        return values.join(",");
      }
    } else {
      return encodeReserved(literal);
    }
  });
}
function parse(options) {
  let method = options.method.toUpperCase();
  let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
  let headers = Object.assign({}, options.headers);
  let body;
  let parameters = omit(options, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const urlVariableNames = extractUrlVariableNames(url);
  url = parseUrl(url).expand(parameters);
  if (!/^http/.test(url)) {
    url = options.baseUrl + url;
  }
  const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
  const remainingParameters = omit(parameters, omittedParameters);
  const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
  if (!isBinaryRequest) {
    if (options.mediaType.format) {
      headers.accept = headers.accept.split(/,/).map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
    }
    if (options.mediaType.previews.length) {
      const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
      headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
        const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
        return `application/vnd.github.${preview}-preview${format}`;
      }).join(",");
    }
  }
  if (["GET", "HEAD"].includes(method)) {
    url = addQueryParameters(url, remainingParameters);
  } else {
    if ("data" in remainingParameters) {
      body = remainingParameters.data;
    } else {
      if (Object.keys(remainingParameters).length) {
        body = remainingParameters;
      }
    }
  }
  if (!headers["content-type"] && typeof body !== "undefined") {
    headers["content-type"] = "application/json; charset=utf-8";
  }
  if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
    body = "";
  }
  return Object.assign({ method, url, headers }, typeof body !== "undefined" ? { body } : null, options.request ? { request: options.request } : null);
}
function endpointWithDefaults(defaults, route, options) {
  return parse(merge(defaults, route, options));
}
function withDefaults(oldDefaults, newDefaults) {
  const DEFAULTS2 = merge(oldDefaults, newDefaults);
  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
  return Object.assign(endpoint2, {
    DEFAULTS: DEFAULTS2,
    defaults: withDefaults.bind(null, DEFAULTS2),
    merge: merge.bind(null, DEFAULTS2),
    parse
  });
}
var VERSION = "7.0.5";
var userAgent = `octokit-endpoint.js/${VERSION} ${getUserAgent()}`;
var DEFAULTS = {
  method: "GET",
  baseUrl: "https://api.github.com",
  headers: {
    accept: "application/vnd.github.v3+json",
    "user-agent": userAgent
  },
  mediaType: {
    format: "",
    previews: []
  }
};
var endpoint = withDefaults(null, DEFAULTS);

// node_modules/@octokit/request/dist-web/index.js
var import_node_fetch = __toESM(require_browser());

// node_modules/deprecation/dist-web/index.js
var Deprecation = class extends Error {
  constructor(message) {
    super(message);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.name = "Deprecation";
  }
};

// node_modules/@octokit/request-error/dist-web/index.js
var import_once = __toESM(require_once());
var logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));
var logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));
var RequestError = class extends Error {
  constructor(message, statusCode, options) {
    super(message);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.name = "HttpError";
    this.status = statusCode;
    let headers;
    if ("headers" in options && typeof options.headers !== "undefined") {
      headers = options.headers;
    }
    if ("response" in options) {
      this.response = options.response;
      headers = options.response.headers;
    }
    const requestCopy = Object.assign({}, options.request);
    if (options.request.headers.authorization) {
      requestCopy.headers = Object.assign({}, options.request.headers, {
        authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
      });
    }
    requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
    this.request = requestCopy;
    Object.defineProperty(this, "code", {
      get() {
        logOnceCode(new Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
        return statusCode;
      }
    });
    Object.defineProperty(this, "headers", {
      get() {
        logOnceHeaders(new Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
        return headers || {};
      }
    });
  }
};

// node_modules/@octokit/request/dist-web/index.js
var VERSION2 = "6.2.5";
function getBufferResponse(response) {
  return response.arrayBuffer();
}
function fetchWrapper(requestOptions) {
  const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
  if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
    requestOptions.body = JSON.stringify(requestOptions.body);
  }
  let headers = {};
  let status;
  let url;
  const fetch = requestOptions.request && requestOptions.request.fetch || globalThis.fetch || /* istanbul ignore next */
  import_node_fetch.default;
  return fetch(
    requestOptions.url,
    Object.assign(
      {
        method: requestOptions.method,
        body: requestOptions.body,
        headers: requestOptions.headers,
        redirect: requestOptions.redirect,
        // duplex must be set if request.body is ReadableStream or Async Iterables.
        // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
        ...requestOptions.body && { duplex: "half" }
      },
      // `requestOptions.request.agent` type is incompatible
      // see https://github.com/octokit/types.ts/pull/264
      requestOptions.request
    )
  ).then(async (response) => {
    url = response.url;
    status = response.status;
    for (const keyAndValue of response.headers) {
      headers[keyAndValue[0]] = keyAndValue[1];
    }
    if ("deprecation" in headers) {
      const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
      const deprecationLink = matches && matches.pop();
      log.warn(
        `[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`
      );
    }
    if (status === 204 || status === 205) {
      return;
    }
    if (requestOptions.method === "HEAD") {
      if (status < 400) {
        return;
      }
      throw new RequestError(response.statusText, status, {
        response: {
          url,
          status,
          headers,
          data: void 0
        },
        request: requestOptions
      });
    }
    if (status === 304) {
      throw new RequestError("Not modified", status, {
        response: {
          url,
          status,
          headers,
          data: await getResponseData(response)
        },
        request: requestOptions
      });
    }
    if (status >= 400) {
      const data = await getResponseData(response);
      const error = new RequestError(toErrorMessage(data), status, {
        response: {
          url,
          status,
          headers,
          data
        },
        request: requestOptions
      });
      throw error;
    }
    return getResponseData(response);
  }).then((data) => {
    return {
      status,
      url,
      headers,
      data
    };
  }).catch((error) => {
    if (error instanceof RequestError)
      throw error;
    else if (error.name === "AbortError")
      throw error;
    throw new RequestError(error.message, 500, {
      request: requestOptions
    });
  });
}
async function getResponseData(response) {
  const contentType = response.headers.get("content-type");
  if (/application\/json/.test(contentType)) {
    return response.json();
  }
  if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
    return response.text();
  }
  return getBufferResponse(response);
}
function toErrorMessage(data) {
  if (typeof data === "string")
    return data;
  if ("message" in data) {
    if (Array.isArray(data.errors)) {
      return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
    }
    return data.message;
  }
  return `Unknown error: ${JSON.stringify(data)}`;
}
function withDefaults2(oldEndpoint, newDefaults) {
  const endpoint2 = oldEndpoint.defaults(newDefaults);
  const newApi = function(route, parameters) {
    const endpointOptions = endpoint2.merge(route, parameters);
    if (!endpointOptions.request || !endpointOptions.request.hook) {
      return fetchWrapper(endpoint2.parse(endpointOptions));
    }
    const request2 = (route2, parameters2) => {
      return fetchWrapper(
        endpoint2.parse(endpoint2.merge(route2, parameters2))
      );
    };
    Object.assign(request2, {
      endpoint: endpoint2,
      defaults: withDefaults2.bind(null, endpoint2)
    });
    return endpointOptions.request.hook(request2, endpointOptions);
  };
  return Object.assign(newApi, {
    endpoint: endpoint2,
    defaults: withDefaults2.bind(null, endpoint2)
  });
}
var request = withDefaults2(endpoint, {
  headers: {
    "user-agent": `octokit-request.js/${VERSION2} ${getUserAgent()}`
  }
});

// node_modules/@octokit/graphql/dist-web/index.js
var VERSION3 = "5.0.6";
function _buildMessageForResponseErrors(data) {
  return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
}
var GraphqlResponseError = class extends Error {
  constructor(request2, headers, response) {
    super(_buildMessageForResponseErrors(response));
    this.request = request2;
    this.headers = headers;
    this.response = response;
    this.name = "GraphqlResponseError";
    this.errors = response.errors;
    this.data = response.data;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
};
var NON_VARIABLE_OPTIONS = [
  "method",
  "baseUrl",
  "url",
  "headers",
  "request",
  "query",
  "mediaType"
];
var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
function graphql(request2, query, options) {
  if (options) {
    if (typeof query === "string" && "query" in options) {
      return Promise.reject(
        new Error(`[@octokit/graphql] "query" cannot be used as variable name`)
      );
    }
    for (const key in options) {
      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
        continue;
      return Promise.reject(
        new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`)
      );
    }
  }
  const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
  const requestOptions = Object.keys(
    parsedOptions
  ).reduce((result, key) => {
    if (NON_VARIABLE_OPTIONS.includes(key)) {
      result[key] = parsedOptions[key];
      return result;
    }
    if (!result.variables) {
      result.variables = {};
    }
    result.variables[key] = parsedOptions[key];
    return result;
  }, {});
  const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
  }
  return request2(requestOptions).then((response) => {
    if (response.data.errors) {
      const headers = {};
      for (const key of Object.keys(response.headers)) {
        headers[key] = response.headers[key];
      }
      throw new GraphqlResponseError(
        requestOptions,
        headers,
        response.data
      );
    }
    return response.data.data;
  });
}
function withDefaults3(request2, newDefaults) {
  const newRequest = request2.defaults(newDefaults);
  const newApi = (query, options) => {
    return graphql(newRequest, query, options);
  };
  return Object.assign(newApi, {
    defaults: withDefaults3.bind(null, newRequest),
    endpoint: newRequest.endpoint
  });
}
var graphql2 = withDefaults3(request, {
  headers: {
    "user-agent": `octokit-graphql.js/${VERSION3} ${getUserAgent()}`
  },
  method: "POST",
  url: "/graphql"
});
function withCustomRequest(customRequest) {
  return withDefaults3(customRequest, {
    method: "POST",
    url: "/graphql"
  });
}

// node_modules/@octokit/auth-token/dist-web/index.js
var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
var REGEX_IS_INSTALLATION = /^ghs_/;
var REGEX_IS_USER_TO_SERVER = /^ghu_/;
async function auth(token) {
  const isApp = token.split(/\./).length === 3;
  const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
  const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
  const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
  return {
    type: "token",
    token,
    tokenType
  };
}
function withAuthorizationPrefix(token) {
  if (token.split(/\./).length === 3) {
    return `bearer ${token}`;
  }
  return `token ${token}`;
}
async function hook(token, request2, route, parameters) {
  const endpoint2 = request2.endpoint.merge(route, parameters);
  endpoint2.headers.authorization = withAuthorizationPrefix(token);
  return request2(endpoint2);
}
var createTokenAuth = function createTokenAuth2(token) {
  if (!token) {
    throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
  }
  if (typeof token !== "string") {
    throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
  }
  token = token.replace(/^(token|bearer) +/i, "");
  return Object.assign(auth.bind(null, token), {
    hook: hook.bind(null, token)
  });
};

// node_modules/@octokit/core/dist-web/index.js
var VERSION4 = "4.2.1";
var Octokit = class {
  static defaults(defaults) {
    const OctokitWithDefaults = class extends this {
      constructor(...args) {
        const options = args[0] || {};
        if (typeof defaults === "function") {
          super(defaults(options));
          return;
        }
        super(
          Object.assign(
            {},
            defaults,
            options,
            options.userAgent && defaults.userAgent ? {
              userAgent: `${options.userAgent} ${defaults.userAgent}`
            } : null
          )
        );
      }
    };
    return OctokitWithDefaults;
  }
  /**
   * Attach a plugin (or many) to your Octokit instance.
   *
   * @example
   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
   */
  static plugin(...newPlugins) {
    var _a;
    const currentPlugins = this.plugins;
    const NewOctokit = (_a = class extends this {
    }, _a.plugins = currentPlugins.concat(
      newPlugins.filter((plugin) => !currentPlugins.includes(plugin))
    ), _a);
    return NewOctokit;
  }
  constructor(options = {}) {
    const hook2 = new import_before_after_hook.Collection();
    const requestDefaults = {
      baseUrl: request.endpoint.DEFAULTS.baseUrl,
      headers: {},
      request: Object.assign({}, options.request, {
        // @ts-ignore internal usage only, no need to type
        hook: hook2.bind(null, "request")
      }),
      mediaType: {
        previews: [],
        format: ""
      }
    };
    requestDefaults.headers["user-agent"] = [
      options.userAgent,
      `octokit-core.js/${VERSION4} ${getUserAgent()}`
    ].filter(Boolean).join(" ");
    if (options.baseUrl) {
      requestDefaults.baseUrl = options.baseUrl;
    }
    if (options.previews) {
      requestDefaults.mediaType.previews = options.previews;
    }
    if (options.timeZone) {
      requestDefaults.headers["time-zone"] = options.timeZone;
    }
    this.request = request.defaults(requestDefaults);
    this.graphql = withCustomRequest(this.request).defaults(requestDefaults);
    this.log = Object.assign(
      {
        debug: () => {
        },
        info: () => {
        },
        warn: console.warn.bind(console),
        error: console.error.bind(console)
      },
      options.log
    );
    this.hook = hook2;
    if (!options.authStrategy) {
      if (!options.auth) {
        this.auth = async () => ({
          type: "unauthenticated"
        });
      } else {
        const auth2 = createTokenAuth(options.auth);
        hook2.wrap("request", auth2.hook);
        this.auth = auth2;
      }
    } else {
      const { authStrategy, ...otherOptions } = options;
      const auth2 = authStrategy(
        Object.assign(
          {
            request: this.request,
            log: this.log,
            // we pass the current octokit instance as well as its constructor options
            // to allow for authentication strategies that return a new octokit instance
            // that shares the same internal state as the current one. The original
            // requirement for this was the "event-octokit" authentication strategy
            // of https://github.com/probot/octokit-auth-probot.
            octokit: this,
            octokitOptions: otherOptions
          },
          options.auth
        )
      );
      hook2.wrap("request", auth2.hook);
      this.auth = auth2;
    }
    const classConstructor = this.constructor;
    classConstructor.plugins.forEach((plugin) => {
      Object.assign(this, plugin(this, options));
    });
  }
};
Octokit.VERSION = VERSION4;
Octokit.plugins = [];

// src/Issues/Issue.ts
var Issue = class {
  constructor(title, description, author, number, created_at, labels, repo) {
    this.labels = [];
    this.title = title;
    this.description = description;
    this.author = author;
    this.number = number;
    this.created_at = created_at;
    this.repo = repo;
    this.labels = labels;
  }
};

// src/Utils/Utils.ts
function calculateHumanDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString(void 0);
}
function parseRepoUrl(url) {
  const split = url.split("/");
  return {
    owner: split[3],
    repo: split[4].replace(".git", "")
  };
}
function verifyURL(url) {
  try {
    new URL(url);
    return true;
  } catch (_) {
    return false;
  }
}
function getPasteableTimeDelta(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const delta = now.getTime() - date.getTime();
  const seconds = Math.floor(delta / 1e3);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  const weeks = Math.floor(days / 7);
  if (weeks > 0) {
    return "on " + date.toLocaleDateString(void 0);
  } else if (days > 0) {
    return `${days} days ago`;
  } else if (hours > 0) {
    return `${hours} hours ago`;
  } else if (minutes > 0) {
    return `${minutes} minutes ago`;
  } else {
    return `${seconds} seconds ago`;
  }
}

// src/API/ApiHandler.ts
var import_obsidian = require("obsidian");
async function api_authenticate(token) {
  const octokit = new Octokit({
    auth: token
  });
  const res = await octokit.request("GET /octocat", {});
  console.log(res);
  if (res.status === 200) {
    return octokit;
  } else {
    return null;
  }
}
async function api_get_repos(octokit) {
  const res = await octokit.request("GET /user/repos", {
    headers: {
      "X-GitHub-Api-Version": "2022-11-28"
    }
  });
  console.log(res.data);
  return res.data.map(
    (repo) => {
      return {
        id: repo.id,
        name: repo.name,
        language: repo.language,
        updated_at: repo.updated_at,
        owner: repo.owner.login
      };
    }
  );
}
async function api_get_labels(octokit, repo) {
  const res = await octokit.request("GET /repos/{owner}/{repo}/labels", {
    owner: repo.owner,
    repo: repo.name,
    headers: {
      "X-GitHub-Api-Version": "2022-11-28"
    }
  });
  if (res.status == 200) {
    return res.data.map((label) => {
      return {
        name: label.name,
        color: label.color
      };
    });
  } else {
    return [];
  }
}
async function api_submit_issue(octokit, repo, issue) {
  const res = await octokit.request("POST /repos/{owner}/{repo}/issues", {
    owner: repo.owner,
    repo: repo.name,
    title: issue.title,
    body: issue.description,
    assignees: [
      repo.owner
    ],
    labels: issue.labels,
    headers: {
      "X-GitHub-Api-Version": "2022-11-28"
    }
  });
  return res.status == 201;
}
async function api_get_issues_by_url(octokit, url) {
  var _a, _b, _c;
  const { owner, repo } = parseRepoUrl(url);
  const issues = [];
  try {
    const res = await octokit.request("GET /repos/{owner}/{repo}/issues", {
      owner,
      repo,
      headers: {
        "X-GitHub-Api-Version": "2022-11-28"
      }
    });
    if (res.status == 200) {
      for (const issue of res.data) {
        issues.push(new Issue(
          issue.title,
          (_a = issue.body) != null ? _a : "",
          (_c = (_b = issue.user) == null ? void 0 : _b.login) != null ? _c : "",
          issue.number,
          issue.created_at,
          issue.labels.map((label) => {
            return {
              name: label.name,
              color: label.color
            };
          })
        ));
      }
      return issues;
    } else {
      return [];
    }
  } catch (e) {
    new import_obsidian.Notice("Error while fetching issues: " + e.message);
    return [];
  }
}
async function api_get_own_issues(octokit, repo) {
  var _a, _b, _c;
  const issues = [];
  const res = await octokit.request("GET /repos/{owner}/{repo}/issues", {
    owner: repo.owner,
    repo: repo.name,
    headers: {
      "X-GitHub-Api-Version": "2022-11-28"
    }
  });
  if (res.status == 200) {
    for (const issue of res.data) {
      issues.push(new Issue(
        issue.title,
        (_a = issue.body) != null ? _a : "",
        (_c = (_b = issue.user) == null ? void 0 : _b.login) != null ? _c : "",
        issue.number,
        issue.created_at,
        issue.labels.map((label) => {
          return {
            name: label.name,
            color: label.color
          };
        }),
        repo
      ));
    }
    return issues;
  } else {
    return [];
  }
}
async function api_get_issues_by_id(octokit, repo, issueIDs) {
  const iss = await api_get_own_issues(octokit, repo);
  return iss.filter((issue) => issueIDs.includes(issue.number));
}
async function api_get_issue_details(octokit, issue) {
  var _a, _b, _c, _d;
  if (issue.repo == null)
    return;
  const res = await octokit.request("GET /repos/{owner}/{repo}/issues/{issue_number}", {
    owner: (_a = issue.repo) == null ? void 0 : _a.owner,
    repo: (_b = issue.repo) == null ? void 0 : _b.name,
    issue_number: issue.number,
    headers: {
      "X-GitHub-Api-Version": "2022-11-28"
    }
  });
  if (res.status == 200) {
    return {
      title: res.data.title,
      body: res.data.body,
      labels: res.data.labels.map((label) => {
        var _a2, _b2;
        return {
          name: (_a2 = label.name) != null ? _a2 : "",
          color: (_b2 = label.color) != null ? _b2 : ""
        };
      }),
      state: res.data.state,
      updated_at: res.data.updated_at,
      assignee: {
        avatar_url: (_c = res.data.assignee) == null ? void 0 : _c.avatar_url,
        login: (_d = res.data.assignee) == null ? void 0 : _d.login
      },
      comments: res.data.comments
    };
  } else {
    return null;
  }
}
async function api_comment_on_issue(octokit, issue, comment) {
  var _a, _b;
  if (issue.repo == null)
    return;
  const res = await octokit.request("POST /repos/{owner}/{repo}/issues/{issue_number}/comments", {
    owner: (_a = issue.repo) == null ? void 0 : _a.owner,
    repo: (_b = issue.repo) == null ? void 0 : _b.name,
    issue_number: issue.number,
    body: comment,
    headers: {
      "X-GitHub-Api-Version": "2022-11-28"
    }
  });
  return res.status == 201;
}
async function api_update_issue(octokit, issue, toBeUpdated) {
  var _a, _b;
  if (issue.repo == null)
    return;
  const options = {
    owner: (_a = issue.repo) == null ? void 0 : _a.owner,
    repo: (_b = issue.repo) == null ? void 0 : _b.name,
    issue_number: issue.number,
    headers: {
      "X-GitHub-Api-Version": "2022-11-28"
    }
  };
  Object.assign(options, toBeUpdated);
  const res = await octokit.request("PATCH /repos/{owner}/{repo}/issues/{issue_number}", options);
  return res.status == 200;
}
async function api_get_issue_comments(octokit, issue) {
  var _a, _b;
  if (issue.repo == null)
    return;
  const res = await octokit.request("GET /repos/{owner}/{repo}/issues/{issue_number}/comments", {
    owner: (_a = issue.repo) == null ? void 0 : _a.owner,
    repo: (_b = issue.repo) == null ? void 0 : _b.name,
    issue_number: issue.number,
    headers: {
      "X-GitHub-Api-Version": "2022-11-28"
    }
  });
  if (res.status == 200) {
    return res.data.map((comment) => {
      var _a2, _b2;
      return {
        body: comment.body,
        login: ((_a2 = comment.user) == null ? void 0 : _a2.login) || "",
        avatar_url: ((_b2 = comment.user) == null ? void 0 : _b2.avatar_url) || "",
        created_at: comment.created_at,
        update_at: comment.updated_at,
        author_association: comment.author_association
      };
    });
  } else {
    return [];
  }
}

// src/Elements/Modals/IssuesModal.ts
var import_obsidian3 = require("obsidian");

// src/Utils/Loader.ts
var loadingSpinner = () => {
  const spinner = document.createElement("div");
  spinner.style.border = "4px solid var(--background-secondary)";
  spinner.style.borderTop = "3px solid var(--interactive-accent)";
  spinner.style.borderRadius = "50%";
  spinner.style.width = "30px";
  spinner.style.height = "30px";
  spinner.style.animation = "spin 1s linear infinite";
  spinner.style.margin = "auto";
  spinner.style.marginTop = "12.5px";
  spinner.style.marginBottom = "12.5ypx";
  const spin = document.createElement("style");
  spin.type = "text/css";
  spin.innerHTML = `
		@keyframes spin {
			0% { transform: rotate(0deg); }
			100% { transform: rotate(360deg); }
		}
	`;
  spinner.appendChild(spin);
  return spinner;
};

// src/Issues/Issues.shared.ts
var import_obsidian2 = require("obsidian");
function pasteRepoName(app2, arg) {
  const view = app2.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
  if (view) {
    const editor = view.editor;
    editor.replaceSelection("```github-issues\n");
    editor.replaceSelection(parseArgToAuthorAndRepoName(arg) + "\n");
    editor.replaceSelection("```\n");
    return true;
  } else {
    return false;
  }
}
function parseArgToAuthorAndRepoName(arg) {
  if (typeof arg === "string") {
    const url = new URL(arg);
    return `${url.pathname.substring(1)}`.replace(".git", "");
  } else {
    return `${arg.owner}/${arg.name}`;
  }
}
function parseIssuesToEmbed(string) {
  const regex = /#\d+([,-]\d+)*/g;
  const resultArray = [];
  const matchArray = string.match(regex);
  if (matchArray !== null) {
    for (const match of matchArray) {
      const issueNums = match.replace("#", "").split(",");
      for (const num of issueNums) {
        if (num.includes("-")) {
          const [start, end] = num.split("-").map(Number);
          for (let i = start; i <= end; i++) {
            if (!resultArray.includes(i)) {
              resultArray.push(i);
            }
          }
        } else {
          const issue = Number(num);
          if (!resultArray.includes(issue)) {
            resultArray.push(issue);
          }
        }
      }
    }
  }
  return resultArray;
}

// src/Elements/Modals/IssuesModal.ts
var IssuesModal = class extends import_obsidian3.Modal {
  constructor(app2, octobundle) {
    super(app2);
    this.octobundle = octobundle;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Insert from URL" });
    const urlInput = this.contentEl.createEl("input");
    urlInput.setAttribute("type", "text");
    urlInput.setAttribute("placeholder", "https://github.com/Frostplexx/obsidian-github-issues.git");
    urlInput.classList.add("issues-url-input");
    const urlButton = this.contentEl.createEl("button", { text: "Insert" });
    urlButton.classList.add("issues-url-button");
    urlButton.addEventListener("click", () => {
      pasteRepoName(this.app, urlInput.value);
      this.close();
    });
    contentEl.createEl("h2", { text: "Your Repositories" });
    const searchInput = contentEl.createEl("input");
    searchInput.setAttribute("type", "text");
    searchInput.setAttribute("placeholder", "Search...");
    searchInput.classList.add("issues-search-input");
    searchInput.addEventListener("input", () => {
      const listEl = contentEl.querySelector("ul");
      if (listEl) {
        const items = listEl.querySelectorAll("li");
        for (const item of items) {
          if (item.textContent.toLowerCase().includes(searchInput.value.toLowerCase())) {
            item.style.display = "block";
          } else {
            item.style.display = "none";
          }
        }
      }
    });
    const loadingEl = loadingSpinner();
    contentEl.appendChild(loadingEl);
    api_get_repos(this.octobundle.octokit).then((repos) => {
      loadingEl.remove();
      const listEl = contentEl.createEl("ul");
      listEl.addClass("nav");
      listEl.addClass("nav-list");
      for (const repo of repos) {
        const itemEl = repoItem(repo);
        itemEl.addEventListener("click", () => {
          pasteRepoName(this.app, repo);
          this.close();
        });
        listEl.appendChild(itemEl);
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var repoItem = (repo) => {
  const opacity = "0.7";
  const itemEl = document.createElement("li");
  itemEl.addClass("nav-item");
  itemEl.addClass("nav-link");
  const containter = document.createElement("div");
  containter.classList.add("issues-modal-container");
  containter.style.opacity = opacity;
  itemEl.appendChild(containter);
  const itemTitle = document.createElement("span");
  itemTitle.classList.add("issues-modal-item-title");
  itemTitle.style.opacity = opacity;
  itemTitle.innerText = repo.name;
  containter.appendChild(itemTitle);
  const itemSubtitle = document.createElement("span");
  itemSubtitle.classList.add("issues-item-subtitle");
  itemSubtitle.style.opacity = opacity;
  itemSubtitle.innerText = `${repo.language} \u2022 Updated on ${calculateHumanDate(repo.updated_at)}`;
  containter.appendChild(itemSubtitle);
  itemEl.addEventListener("mouseenter", () => {
    itemTitle.style.opacity = "1";
    containter.style.opacity = "1";
  });
  itemEl.addEventListener("mouseleave", () => {
    itemTitle.style.opacity = opacity;
    containter.style.opacity = opacity;
  });
  return itemEl;
};

// src/Issues/IssueUpdater.ts
var import_obsidian4 = require("obsidian");
async function updateIssues(app2, octokit) {
  let repo = getRepoInFile(app2);
  let view = app2.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
  if (!checkEditor(view, repo))
    return;
  repo = repo;
  view = view;
  const editor = view.editor;
  const url = "https://github.com/" + repo.name + "/" + repo.repo + ".git";
  if (!verifyURL(url)) {
    new import_obsidian4.Notice("Error building url: " + url);
    return;
  }
  const issues = await fetchIssues(octokit, url);
  if (issues) {
    insertIssues(editor, repo, view, url, issues);
  }
}
function insertIssues(editor, repo, view, url, issues) {
  editor.replaceRange("", { line: repo.start_line, ch: 0 }, { line: repo.end_line + 2, ch: 0 });
  editor.setCursor({ line: repo.start_line, ch: 0 });
  const pasted = pasteRepoName(view, url, issues);
  if (pasted) {
    new import_obsidian4.Notice("Updated issues");
  } else {
    new import_obsidian4.Notice("Some error occurred while pasting the issues");
  }
}
function checkEditor(view, repo) {
  if (!view) {
    new import_obsidian4.Notice("No active view");
    return false;
  }
  if (view.getMode() !== "source") {
    new import_obsidian4.Notice("Please switch to source mode before updating the issues");
    return false;
  }
  if (!repo) {
    new import_obsidian4.Notice("No repo found in file");
    return false;
  }
  return true;
}
async function fetchIssues(octokit, url) {
  const issues = await api_get_issues_by_url(octokit, url);
  if (issues.length === 0) {
    return null;
  }
  return issues;
}
function getRepoInFile(app2) {
  const view = app2.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
  if (view) {
    const editor = view.editor;
    let start_line = 0;
    let end_line = 0;
    for (let i = 0; i < editor.lineCount(); i++) {
      const line = editor.getLine(i);
      console.log(line);
      if (line.includes("```github-issues")) {
        start_line = i;
      }
      if (line.includes("```")) {
        end_line = i;
      }
    }
    console.log(start_line);
    console.log(end_line);
    const start_line_text = editor.getLine(start_line + 1);
    const name_and_repo_split = start_line_text.split("/");
    const name = name_and_repo_split[0];
    const repo = name_and_repo_split[1];
    console.log(name);
    console.log(repo);
    if (repo != void 0) {
      return {
        name,
        repo,
        start_line,
        end_line
      };
    } else {
      return null;
    }
  }
  return null;
}

// src/Elements/Modals/NewIssueModal.ts
var import_obsidian5 = require("obsidian");
var NewIssueModal = class extends import_obsidian5.Modal {
  constructor(app2, ocotoBundle) {
    super(app2);
    this.ocotoBundle = ocotoBundle;
  }
  async onOpen() {
    const repo = () => {
      const repo2 = getRepoInFile(this.app);
      if (!repo2)
        return null;
      return {
        name: repo2.repo,
        owner: repo2.name
      };
    };
    if (repo()) {
      const { contentEl } = this;
      contentEl.createEl("h2", { text: "New Issue in: " + repo().owner + "/" + repo().name });
      const spinner = loadingSpinner();
      contentEl.appendChild(spinner);
      const labels = (await api_get_labels(this.ocotoBundle.octokit, repo())).map((label) => label.name);
      spinner.remove();
      const titleInput = contentEl.createEl("input");
      titleInput.setAttribute("type", "text");
      titleInput.setAttribute("placeholder", "Title");
      titleInput.style.width = "100%";
      titleInput.style.padding = "5px";
      titleInput.style.marginBottom = "10px";
      const descriptionInput = contentEl.createEl("textarea");
      descriptionInput.setAttribute("type", "text");
      descriptionInput.setAttribute("placeholder", "Description");
      descriptionInput.style.width = "100%";
      descriptionInput.style.maxWidth = "100%";
      descriptionInput.style.minWidth = "100%";
      descriptionInput.style.padding = "5px";
      descriptionInput.style.marginBottom = "10px";
      descriptionInput.style.height = "100px";
      descriptionInput.style.maxHeight = "500px";
      descriptionInput.style.fontFamily = "monospace";
      descriptionInput.style.fontSize = "12px";
      const selectedLabels = contentEl.createEl("div");
      selectedLabels.style.display = "flex";
      selectedLabels.style.flexWrap = "wrap";
      const labelDropdown = contentEl.createEl("select");
      labelDropdown.style.width = "100%";
      labelDropdown.style.padding = "5px";
      labelDropdown.style.marginBottom = "10px";
      labelDropdown.style.height = "30px";
      labelDropdown.style.maxHeight = "30px";
      labelDropdown.style.maxWidth = "100%";
      labelDropdown.style.fontSize = "12px";
      labelDropdown.style.borderRadius = "5px";
      labelDropdown.createEl("option", {
        value: "Select Labels",
        text: "Select Labels"
      });
      for (const label of labels) {
        const option = labelDropdown.createEl("option");
        option.setAttribute("value", label);
        option.text = label;
      }
      let elements = [];
      labelDropdown.addEventListener("change", () => {
        const value = labelDropdown.value;
        labelDropdown.value = "Select Labels";
        const tag = selectedLabels.createEl("div");
        tag.style.display = "flex";
        tag.style.alignItems = "center";
        tag.style.justifyContent = "center";
        tag.style.padding = "5px";
        tag.style.margin = "5px";
        tag.style.marginBottom = "10px";
        tag.style.borderRadius = "5px";
        tag.style.backgroundColor = "var(--background-modifier-form-field)";
        tag.createEl("span", { text: value });
        const removeButton = tag.createEl("button");
        removeButton.style.backgroundColor = "inherit";
        removeButton.style.border = "none";
        removeButton.style.outline = "none";
        removeButton.style.boxShadow = "none";
        removeButton.style.padding = "0";
        removeButton.style.margin = "0";
        (0, import_obsidian5.setIcon)(removeButton, "x");
        removeButton.onclick = () => {
          selectedLabels.removeChild(tag);
          elements = elements.filter((e) => e !== value);
          labelDropdown.childNodes.forEach((node) => {
            if (node instanceof HTMLOptionElement) {
              if (node.value === value) {
                node.disabled = false;
              }
            }
          });
        };
        removeButton.style.marginLeft = "5px";
        elements.push(value);
        labelDropdown.childNodes.forEach((node) => {
          if (node instanceof HTMLOptionElement) {
            if (node.value === value) {
              node.disabled = true;
            }
          }
        });
      });
      const submitButton = contentEl.createEl("button", { text: "Submit" });
      submitButton.addEventListener("click", async () => {
        const submitted = await api_submit_issue(this.ocotoBundle.octokit, repo(), {
          labels: elements,
          title: titleInput.value,
          description: descriptionInput.value
        });
        if (submitted) {
          new import_obsidian5.Notice("Submitted Issue");
          this.close();
          await updateIssues(this.app, this.ocotoBundle.octokit);
        } else {
          new import_obsidian5.Notice("Failed to submit issue");
        }
      });
    } else {
      new import_obsidian5.Notice("You are not in a GitHub repo");
      this.close();
    }
  }
};

// src/Elements/Modals/IssuesDetailsModal.ts
var import_obsidian6 = require("obsidian");

// src/Utils/Color.utils.ts
function getTextColor(hexColor) {
  if (hexColor == void 0)
    return "#000000";
  const color = hexColor.contains("#") ? hexColor.replace("#", "") : hexColor;
  const r = parseInt(color.substring(0, 2), 16);
  const g = parseInt(color.substring(2, 4), 16);
  const b = parseInt(color.substring(4, 6), 16);
  const yiq = (r * 299 + g * 587 + b * 114) / 1e3;
  return yiq >= 128 ? "#000000" : "#ffffff";
}

// src/Elements/Modals/IssuesDetailsModal.ts
var IssuesDetailsModal = class extends import_obsidian6.Modal {
  constructor(app2, issue, octokit) {
    super(app2);
    this.issue = issue;
    this.octokit = octokit;
  }
  async onOpen() {
    var _a, _b;
    const { contentEl } = this;
    const title = contentEl.createEl("h2", { text: this.issue.title + " \u2022 #" + this.issue.number });
    title.style.margin = "0";
    const authorAndSutff = contentEl.createSpan({
      text: `Created by ${this.issue.author} ${getPasteableTimeDelta(this.issue.created_at)}`
    });
    authorAndSutff.classList.add("issues-auhtor");
    contentEl.createEl("br");
    const issueLink = contentEl.createEl("a", { text: "View on GitHub" });
    issueLink.setAttribute("href", "https://github.com/" + ((_a = this.issue.repo) == null ? void 0 : _a.owner) + "/" + ((_b = this.issue.repo) == null ? void 0 : _b.name) + "/issues/" + this.issue.number);
    issueLink.classList.add("issue-link");
    const spinner = loadingSpinner();
    contentEl.appendChild(spinner);
    const details = await api_get_issue_details(this.octokit, this.issue);
    spinner.remove();
    if (!details) {
      contentEl.createEl("h3", { text: "Could not fetch issue details" });
      return;
    }
    const stateAndLabelsContainer = contentEl.createDiv();
    stateAndLabelsContainer.classList.add("issues-state-and-label-container");
    const statePill = stateAndLabelsContainer.createDiv();
    statePill.classList.add("issues-state-pill");
    if ((details == null ? void 0 : details.state) === "open") {
      statePill.style.backgroundColor = "rgba(31, 118, 41, 0.5)";
    } else {
      statePill.style.backgroundColor = "rgba(116, 58, 222, 0.5)";
    }
    const state = statePill.createEl("span", { text: details == null ? void 0 : details.state });
    state.classList.add("issues-state");
    const labels = stateAndLabelsContainer.createDiv();
    labels.classList.add("issues-labels");
    if ((details == null ? void 0 : details.labels.length) > 0) {
      for (const label of details == null ? void 0 : details.labels) {
        const labelPill = labels.createDiv();
        labelPill.classList.add("issues-label-pill");
        labelPill.style.background = "#" + label.color;
        const labelName = labelPill.createEl("span", { text: label.name });
        labelName.classList.add("issues-label-name");
        labelName.style.color = getTextColor(label.color);
      }
    }
    if (details.assignee.login != void 0) {
      const assigneeContainer = contentEl.createDiv();
      assigneeContainer.classList.add("issues-asignee-container");
      const assigneeIcon = assigneeContainer.createEl("img");
      assigneeIcon.classList.add("issues-assignee-icon");
      assigneeIcon.src = details == null ? void 0 : details.assignee.avatar_url;
      const assignee = assigneeContainer.createSpan({
        text: `Assigned to ${details == null ? void 0 : details.assignee.login}`
      });
      assignee.classList.add("issues-assignee");
    }
    const bodyContainer = contentEl.createDiv();
    bodyContainer.classList.add("issues-body-container");
    const containerTitle = bodyContainer.createEl("h3", { text: "Description" });
    containerTitle.classList.add("issues-container-title");
    const body = bodyContainer.createDiv();
    body.classList.add("issues-body");
    body.innerText = details == null ? void 0 : details.body;
    const spinner2 = loadingSpinner();
    contentEl.appendChild(spinner2);
    const comments = await api_get_issue_comments(this.octokit, this.issue);
    spinner2.remove();
    if (!comments) {
      contentEl.createEl("h3", { text: "Could not fetch comments" });
      return;
    }
    if (comments.length > 0) {
      contentEl.createEl("h3", { text: "Comments" });
    }
    comments.forEach((comment) => {
      const commentsContainer = contentEl.createDiv();
      commentsContainer.classList.add("issues-comments-container");
      const authorContainer = commentsContainer.createDiv();
      authorContainer.classList.add("issues-author-container");
      const authorIcon = authorContainer.createEl("img");
      authorIcon.classList.add("issues-author-icon");
      authorIcon.src = comment == null ? void 0 : comment.avatar_url;
      const authorName = authorContainer.createEl("span", { text: comment == null ? void 0 : comment.login });
      authorName.classList.add("issues-author-name");
      const commentBody = commentsContainer.createDiv();
      commentBody.classList.add("issues-comment-body");
      const commentText = commentBody.createEl("span", { text: comment == null ? void 0 : comment.body });
      commentText.classList.add("issues-comment-text");
    });
    const commentsInput = contentEl.createEl("textarea");
    commentsInput.classList.add("issues-comments-input");
    const commentsInputLabel = contentEl.createEl("label", { text: "Write a comment" });
    commentsInputLabel.classList.add("issues-comments-input-label");
    commentsInputLabel.htmlFor = commentsInput.id;
    const buttonsContainer = contentEl.createDiv();
    buttonsContainer.classList.add("issues-buttons-container");
    const commentButton = buttonsContainer.createEl("button", { text: "Comment" });
    commentButton.classList.add("issues-comment-button");
    const closeButton = buttonsContainer.createEl("button", { text: "Close Issue" });
    closeButton.classList.add("issues-close-button");
    commentButton.onclick = async () => {
      const updated = await api_comment_on_issue(this.octokit, this.issue, commentsInput.value);
      if (updated) {
        new import_obsidian6.Notice("Comment posted");
        this.close();
      }
    };
    closeButton.onclick = async () => {
      const updated = await api_update_issue(this.octokit, this.issue, {
        state: "closed"
      });
      if (updated) {
        this.close();
        new import_obsidian6.Notice("Issue closed");
        await updateIssues(this.app, this.octokit);
      } else {
        new import_obsidian6.Notice("Could not close issue");
      }
    };
  }
};

// src/Elements/IssueItems.ts
function createDefaultIssueElement(el, issue, ocotokit, app2) {
  const container = el.createDiv({ cls: "issue-container" });
  container.style.cursor = "pointer";
  container.style.padding = "0";
  container.style.margin = "0";
  container.style.marginBottom = "5px";
  container.style.marginTop = "7px";
  container.style.boxShadow = "var(--embed-block-shadow-hover)";
  container.style.borderRadius = "var(--radius-s)";
  container.style.width = "80%";
  container.style.overflow = "hidden";
  container.style.textOverflow = "ellipsis";
  container.style.whiteSpace = "nowrap";
  const title = container.createEl("h5", { text: issue.title });
  title.style.margin = "0";
  title.style.display = "flex";
  title.style.flexDirection = "row";
  title.style.alignItems = "center";
  title.style.marginLeft = "7px";
  title.style.marginTop = "7px";
  title.style.padding = "0";
  title.style.textOverflow = "ellipsis";
  title.style.whiteSpace = "nowrap";
  title.style.overflow = "hidden";
  const details = container.createDiv({ cls: "issue-details" });
  details.style.padding = "0";
  details.style.margin = "0";
  details.style.display = "flex";
  details.style.flexDirection = "row";
  details.style.alignItems = "top";
  const detailsText = details.createEl("span", { text: `#${issue.number} opened ${getPasteableTimeDelta(issue.created_at)} by ${issue.author}` });
  detailsText.style.margin = "0";
  detailsText.style.fontSize = "14px";
  detailsText.style.marginLeft = "7px";
  detailsText.style.marginBottom = "7px";
  detailsText.style.padding = "0";
  detailsText.style.opacity = "0.7";
  issue.labels.forEach((label) => {
    const labelEl = title.createDiv({ cls: "label" });
    labelEl.style.backgroundColor = `#${label.color}`;
    labelEl.style.color = getTextColor(label.color);
    labelEl.style.padding = "2px";
    labelEl.style.margin = "2px";
    labelEl.style.borderRadius = "var(--radius-s)";
    labelEl.style.fontSize = "10px";
    labelEl.style.opacity = "0.8";
    labelEl.innerText = label.name;
  });
  container.addEventListener("mouseenter", () => {
    container.style.opacity = "0.7";
  });
  container.addEventListener("mouseleave", () => {
    container.style.opacity = "1";
  });
  container.addEventListener("click", () => {
    container.style.opacity = "0.5";
    new IssuesDetailsModal(app2, issue, ocotokit).open();
  });
}
function createCompactIssueElement(el, issue, ocotokit, app2) {
  const container = el.createDiv({ cls: "issue-container" });
  container.style.cursor = "pointer";
  container.style.padding = "0";
  container.style.margin = "0";
  container.style.marginBottom = "5px";
  container.style.marginTop = "5px";
  container.style.boxShadow = "var(--embed-block-shadow-hover)";
  container.style.borderRadius = "var(--radius-s)";
  container.style.width = "80%";
  container.style.overflow = "hidden";
  container.style.textOverflow = "ellipsis";
  container.style.whiteSpace = "nowrap";
  container.style.fontSize = "1.1em";
  const text = container.createSpan({
    text: `#${issue.number} \u2022 ${issue.title} `
  });
  text.style.margin = "0";
  text.style.marginLeft = "5px";
  text.style.padding = "0";
  text.style.textOverflow = "ellipsis";
  text.style.whiteSpace = "nowrap";
  text.style.overflow = "hidden";
  const text2 = container.createSpan({
    text: `opened ${getPasteableTimeDelta(issue.created_at)} by ${issue.author}`
  });
  text2.style.opacity = "0.7";
  container.addEventListener("mouseenter", () => {
    container.style.opacity = "0.7";
  });
  container.addEventListener("mouseleave", () => {
    container.style.opacity = "1";
  });
  container.addEventListener("click", () => {
    container.style.opacity = "0.5";
    new IssuesDetailsModal(app2, issue, ocotokit).open();
  });
}

// src/Messages/Errors.ts
var errors = {
  noCreds: "Please enter your username and password in the settings. You may need to toggle the extension off and on again for the changes to take effect."
};

// src/main.ts
var IssueAppearance = /* @__PURE__ */ ((IssueAppearance2) => {
  IssueAppearance2["DEFAULT"] = "default";
  IssueAppearance2["COMPACT"] = "compact";
  return IssueAppearance2;
})(IssueAppearance || {});
var DEFAULT_SETTINGS = {
  username: "",
  password: "",
  issue_appearance: "default" /* DEFAULT */,
  show_searchbar: true
};
var MyPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.octokit = new Octokit({ auth: "" });
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new GithubIssuesSettings(this.app, this));
    if (this.settings.password == "" || this.settings.username == "") {
      new import_obsidian7.Notice("Please enter your username and password in the settings.");
    } else {
      try {
        this.octokit = await api_authenticate(this.settings.password) ? new Octokit({ auth: this.settings.password }) : new Octokit({ auth: "" });
        if (!this.octokit) {
          new import_obsidian7.Notice("Authentication failed. Please check your credentials.");
        }
      } catch (e) {
        new import_obsidian7.Notice("Authentication failed. Please check your credentials.");
      }
    }
    this.registerMarkdownCodeBlockProcessor("github-issues", async (source, el) => {
      const rows = source.split("\n").filter((row) => row.length > 0);
      const repoName = rows[0].split("/")[1].split("#")[0];
      const owner = rows[0].split("/")[0];
      const parsedIssues = parseIssuesToEmbed(rows[0]);
      const repo = {
        owner,
        name: repoName,
        id: 0,
        language: "",
        updated_at: ""
      };
      el.classList.add("issue-container");
      if (this.settings.show_searchbar) {
        const searchfield = el.createEl("input");
        searchfield.setAttribute("type", "text");
        searchfield.setAttribute("placeholder", "Search Titles, Labels,...");
        searchfield.classList.add("issues-searchfield");
        searchfield.addEventListener("input", () => {
          const search = searchfield.value.toLowerCase();
          el.childNodes.forEach((child) => {
            if (child instanceof HTMLElement) {
              if (child.innerText.toLowerCase().includes(search)) {
                child.style.display = "flex";
              } else if (child !== searchfield) {
                child.style.display = "none";
              }
            }
          });
        });
      }
      let issues = [];
      if (parsedIssues.length != 0) {
        issues = await api_get_issues_by_id(this.octokit, repo, parsedIssues);
      } else {
        issues = await api_get_own_issues(this.octokit, repo);
      }
      issues.forEach((issue) => {
        switch (this.settings.issue_appearance) {
          case "default" /* DEFAULT */:
            createDefaultIssueElement(el, issue, this.octokit, app);
            break;
          case "compact" /* COMPACT */:
            createCompactIssueElement(el, issue, this.octokit, app);
            break;
        }
      });
    });
    this.addCommand({
      id: "embed-issues",
      name: "Embed open Issues",
      callback: () => {
        if (this.octokit) {
          new IssuesModal(this.app, {
            octokit: this.octokit,
            plugin_settings: this.settings
          }).open();
        } else {
          new import_obsidian7.Notice(errors.noCreds);
        }
      }
    });
    this.addCommand({
      id: "update-issues",
      name: "Force-update Issues",
      callback: () => {
        if (this.octokit) {
          new import_obsidian7.Notice("Updating issues...");
          updateIssues(this.app, this.octokit);
        } else {
          new import_obsidian7.Notice(errors.noCreds);
        }
      }
    });
    this.addCommand({
      id: "new-issue",
      name: "Create new Issue",
      callback: () => {
        if (this.octokit) {
          new NewIssueModal(this.app, { octokit: this.octokit, plugin_settings: this.settings }).open();
        } else {
          new import_obsidian7.Notice(errors.noCreds);
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var GithubIssuesSettings = class extends import_obsidian7.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Github Authentication" });
    containerEl.createSpan({
      text: "To use this plugin, you need to create a personal access token. You can find a guide on how to do that in the "
    }).createEl("a", {
      text: "README.",
      href: "https://github.com/Frostplexx/obsidian-github-issues#prerequisites"
    });
    new import_obsidian7.Setting(containerEl).setName("Username").setDesc("Your Github Username or Email").addText((text) => text.setPlaceholder("John Doe").setValue(this.plugin.settings.username).onChange(async (value) => {
      console.log("Username: " + value);
      this.plugin.settings.username = value;
      await this.plugin.saveSettings();
      this.plugin.octokit = await api_authenticate(this.plugin.settings.password) ? new Octokit({ auth: this.plugin.settings.password }) : new Octokit({});
      if (this.plugin.octokit && this.plugin.settings.password) {
        new import_obsidian7.Notice("Successfully authenticated!");
      }
    }));
    new import_obsidian7.Setting(containerEl).setName("Personal Authentication Token").setDesc("Personal Authentication Token").addText((text) => text.setPlaceholder("XXXXXXXXXXXXXXX").setValue(this.plugin.settings.password).onChange(async (value) => {
      console.log("Password: " + value);
      this.plugin.settings.password = value;
      await this.plugin.saveSettings();
      this.plugin.octokit = await api_authenticate(this.plugin.settings.password) ? new Octokit({ auth: this.plugin.settings.password }) : new Octokit({});
      if (this.plugin.octokit && this.plugin.settings.username) {
        new import_obsidian7.Notice("Successfully authenticated!");
      }
    }));
    containerEl.createEl("h2", { text: "Appearance" });
    new import_obsidian7.Setting(containerEl).setName("Issues Appearance").setDesc("How should the issues be displayed?").addDropdown((dropdown) => dropdown.addOption("default" /* DEFAULT */, "Default").addOption("compact" /* COMPACT */, "Compact").setValue(this.plugin.settings.issue_appearance).onChange(async (value) => {
      console.log("Appearance: " + value);
      this.plugin.settings.issue_appearance = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName("Show Searchbar").setDesc("Show a searchbar above the issues in the embed.").addToggle((toggle) => toggle.setValue(this.plugin.settings.show_searchbar).onChange(async (value) => {
      console.log("Show Searchbar: " + value);
      this.plugin.settings.show_searchbar = value;
      await this.plugin.saveSettings();
    }));
  }
};
/*! Bundled license information:

is-plain-object/dist/is-plain-object.mjs:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
